import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;

public class WeatherApp {
    private static final String API_KEY = "YOUR_OPENWEATHERMAP_API_KEY";
    private static final String API_URL = "http://api.openweathermap.org/data/2.5/weather?q=";

    public static void main(String[] args) {
        try {
            BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

            System.out.print("Enter city name: ");
            String cityName = reader.readLine();

            String apiUrl = API_URL + cityName + "&appid=" + API_KEY;
            String jsonResponse = getWeatherData(apiUrl);

            if (jsonResponse != null) {
                WeatherInfo weatherInfo = parseWeather(jsonResponse);
                if (weatherInfo != null) {
                    displayWeather(weatherInfo);
                } else {
                    System.out.println("Error parsing weather data.");
                }
            } else {
                System.out.println("Unable to fetch weather data. Please check the city name and try again.");
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static String getWeatherData(String apiUrl) throws Exception {
        URL url = new URL(apiUrl);
        HttpURLConnection connection = (HttpURLConnection) url.openConnection();
        connection.setRequestMethod("GET");

        BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));
        StringBuilder response = new StringBuilder();
        String line;

        while ((line = reader.readLine()) != null) {
            response.append(line);
        }

        reader.close();
        connection.disconnect();

        return response.toString();
    }

    private static WeatherInfo parseWeather(String jsonResponse) {
        try {
            ObjectMapper mapper = new ObjectMapper();
            JsonNode root = mapper.readTree(jsonResponse);

            if (root.has("main") && root.get("main").has("temp")) {
                double temperature = root.get("main").get("temp").asDouble();
                String description = root.get("weather").get(0).get("description").asText();

                return new WeatherInfo(temperature, description);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return null;
    }

    private static void displayWeather(WeatherInfo weatherInfo) {
        System.out.println("Weather Information:");
        System.out.println("Temperature: " + weatherInfo.getTemperature() + "Â°C");
        System.out.println("Description: " + weatherInfo.getDescription());
    }
}

class WeatherInfo {
    private double temperature;
    private String description;

    public WeatherInfo(double temperature, String description) {
        this.temperature = temperature;
        this.description = description;
    }

    public double getTemperature() {
        return temperature;
    }

    public String getDescription() {
        return description;
    }
}
